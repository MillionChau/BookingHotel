import React, { useState, useEffect, useCallback } from "react";
import { Table, Form, Button, Spinner, Alert, Modal, Badge, Card } from "react-bootstrap";
import axios from "axios";

export default function ReviewManager() {
  const [reviews, setReviews] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [selectedRoom, setSelectedRoom] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [reviewToDelete, setReviewToDelete] = useState(null);
  const [stats, setStats] = useState({ averageRating: 0, totalReviews: 0 });

  const reviewBaseUrl = "http://localhost:5360/review";
  const roomBaseUrl = "http://localhost:5360/room";

  /** üè® L·∫•y danh s√°ch ph√≤ng */
  const fetchRooms = async () => {
    try {
      const res = await axios.get(`${roomBaseUrl}/all`);
      setRooms(res.data.rooms || res.data.data || []);
    } catch (err) {
      console.error("L·ªói khi l·∫•y danh s√°ch ph√≤ng:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng!");
    }
  };

  /** üìù L·∫•y danh s√°ch ƒë√°nh gi√° */
  const fetchAllReviews = useCallback(async () => {
    setLoading(true);
    setError("");

    try {
      const res = await axios.get(`${reviewBaseUrl}/all`);
      setReviews(res.data.reviews || res.data.data || []);
    } catch (err) {
      console.warn("API /all kh√¥ng ho·∫°t ƒë·ªông, fallback t·ª´ng ph√≤ng...");
      try {
        const allReviews = [];
        for (const room of rooms) {
          const res = await axios.get(`${reviewBaseUrl}/room/${room.roomId}`);
          allReviews.push(...(res.data.reviews || []));
        }
        setReviews(allReviews);
      } catch (fallbackErr) {
        console.error("Fallback th·∫•t b·∫°i:", fallbackErr);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë√°nh gi√°!");
      }
    } finally {
      setLoading(false);
    }
  }, [rooms]); // Th√™m rooms v√†o dependencies v√¨ s·ª≠ d·ª•ng b√™n trong

  /** ‚≠ê L·∫•y th·ªëng k√™ theo ph√≤ng */
  const fetchRoomStats = async (roomId) => {
    if (!roomId) {
      setStats({ averageRating: 0, totalReviews: 0 });
      return;
    }

    try {
      const res = await axios.get(`${reviewBaseUrl}/room/${roomId}/rating`);
      setStats({
        averageRating: res.data.averageRating || 0,
        totalReviews: res.data.totalReviews || 0,
      });
    } catch (err) {
      console.error("L·ªói khi l·∫•y th·ªëng k√™:", err);
      setStats({ averageRating: 0, totalReviews: 0 });
    }
  };

  /** üóëÔ∏è X√≥a ƒë√°nh gi√° */
  const handleDeleteReview = async () => {
    if (!reviewToDelete) return;
    try {
      await axios.delete(`${reviewBaseUrl}/${reviewToDelete.reviewId}`, {
        data: { userId: "admin", userRole: "admin" },
      });
      setReviews((prev) => prev.filter((r) => r.reviewId !== reviewToDelete.reviewId));
      setShowDeleteModal(false);
      setReviewToDelete(null);
      if (selectedRoom) fetchRoomStats(selectedRoom);
    } catch (err) {
      console.error("L·ªói khi x√≥a ƒë√°nh gi√°:", err);
      setError("Kh√¥ng th·ªÉ x√≥a ƒë√°nh gi√°: " + (err.response?.data?.message || err.message));
    }
  };

  /** ‚≠ê Hi·ªÉn th·ªã sao ƒë√°nh gi√° */
  const renderRatingStars = (rating) =>
    "‚≠ê".repeat(rating || 0) + "‚òÜ".repeat(5 - (rating || 0));

  /** üß© Hooks */
  useEffect(() => {
    fetchRooms();
  }, []);

  useEffect(() => {
    if (rooms.length > 0) fetchAllReviews();
  }, [rooms, fetchAllReviews]);

  useEffect(() => {
    fetchRoomStats(selectedRoom);
  }, [selectedRoom]);

  /** L·ªçc theo ph√≤ng */
  const filteredReviews = selectedRoom
    ? reviews.filter((r) => r.roomId === selectedRoom)
    : reviews;

  return (
    <div className="container mt-4">
      <h2 className="mb-4">Qu·∫£n l√Ω ƒê√°nh gi√°</h2>

      {error && (
        <Alert variant="danger" dismissible onClose={() => setError("")}>
          {error}
        </Alert>
      )}

      {/* B·ªô l·ªçc + th·ªëng k√™ */}
      <div className="row mb-4">
        <div className="col-md-6">
          {/* <Form.Group>
            <Form.Label>Ph√≤ng</Form.Label>
            <Form.Select
              value={selectedRoom}
              onChange={(e) => setSelectedRoom(e.target.value)}
            >
              <option value="">T·∫•t c·∫£ ph√≤ng</option>
              {rooms.map((room) => (
                <option key={room.roomId} value={room.roomId}>
                  {room.name} ({room.roomId})
                </option>
              ))}
            </Form.Select>
          </Form.Group> */}
        </div>

        {selectedRoom && (
          <div className="col-md-6">
            <Card className="bg-light border">
              <Card.Body>
                <h5>üìä Th·ªëng k√™ ƒë√°nh gi√°</h5>
                <p>
                  Trung b√¨nh:{" "}
                  <Badge bg="primary">{stats.averageRating.toFixed(1)}/5</Badge>
                </p>
                <p>
                  T·ªïng s·ªë ƒë√°nh gi√°:{" "}
                  <Badge bg="secondary">{stats.totalReviews}</Badge>
                </p>
              </Card.Body>
            </Card>
          </div>
        )}
      </div>

      {/* B·∫£ng d·ªØ li·ªáu */}
      {loading ? (
        <div className="text-center py-5">
          <Spinner animation="border" role="status" />
          <p className="mt-3">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>#</th>
              <th>M√£ ƒë√°nh gi√°</th>
              <th>Ph√≤ng</th>
              <th>Ng∆∞·ªùi ƒë√°nh gi√°</th>
              <th>ƒêi·ªÉm</th>
              <th>N·ªôi dung</th>
              <th>Ng√†y ƒë√°nh gi√°</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredReviews.length > 0 ? (
              filteredReviews.map((review, idx) => (
                <tr key={review.reviewId}>
                  <td>{idx + 1}</td>
                  <td>{review.reviewId}</td>
                  <td>{review.roomId}</td>
                  <td>{review.userId?.fullname || review.reviewer || "·∫®n danh"}</td>
                  <td title={`${review.rating} sao`}>
                    {renderRatingStars(review.rating)}
                  </td>
                  <td>{review.content || review.comment}</td>
                  <td>{new Date(review.addedDate).toLocaleString("vi-VN")}</td>
                  <td>
                    <Button
                      variant="outline-danger"
                      size="sm"
                      onClick={() => {
                        setReviewToDelete(review);
                        setShowDeleteModal(true);
                      }}
                    >
                      X√≥a
                    </Button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="8" className="text-center text-muted py-4">
                  {selectedRoom
                    ? "Kh√¥ng c√≥ ƒë√°nh gi√° n√†o cho ph√≤ng n√†y"
                    : "Kh√¥ng c√≥ ƒë√°nh gi√° n√†o"}
                </td>
              </tr>
            )}
          </tbody>
        </Table>
      )}

      {/* Modal x√°c nh·∫≠n x√≥a */}
      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>X√°c nh·∫≠n x√≥a</Modal.Title>
        </Modal.Header>
        <Modal.Body>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë√°nh gi√° n√†y kh√¥ng?</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowDeleteModal(false)}>
            H·ªßy
          </Button>
          <Button variant="danger" onClick={handleDeleteReview}>
            X√≥a
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}